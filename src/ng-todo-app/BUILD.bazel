load("@build_bazel_rules_nodejs//:index.bzl", "pkg_web")
load("@io_bazel_rules_sass//:defs.bzl", "sass_binary")
load("@npm_angular_bazel//:index.bzl", "ng_module")
load("@npm_bazel_rollup//:index.bzl", "rollup_bundle")
load("@npm_bazel_terser//:index.bzl", "terser_minified")
load("@npm_bazel_typescript//:index.bzl", "ts_devserver")
load("@npm//history-server:index.bzl", "history_server")
load("@npm//html-insert-assets:index.bzl", "html_insert_assets")

package(default_visibility = ["//visibility:private"])

ng_module(
    name = "ng-todo-app",
    srcs = [
        "main.dev.ts",
        "main.prod.ts",
    ],
    deps = [
        "//src/ng-todo-app/app",
        "@npm//@angular/animations",
        "@npm//@angular/core",
        "@npm//@angular/platform-browser",
    ],
)

sass_binary(
    name = "styles",
    src = "styles.scss",
)

ASSETS = [
    ":styles.css",
    "@npm//:node_modules/zone.js/dist/zone.min.js",
]

filegroup(
    name = "rxjs_umd_modules",
    srcs = [
        "rxjs_shim.js",
        "@npm//:node_modules/rxjs/bundles/rxjs.umd.js",
    ],
)

html_insert_assets(
    name = "inject_scripts_for_dev",
    outs = ["index.html"],
    args = [
        "--html=$(execpath :index.dev.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in ASSETS] + [
        # This file doesn't exist during the build, but will be served by ts_devserver
        "./_/ts_scripts.js",
    ],
    data = [":index.dev.html"] + ASSETS,
)

ts_devserver(
    name = "devserver",
    entry_module = "angular_bazel_fun/src/ng-todo-app/main.dev",
    port = 8000,
    scripts = [
        "@npm//:node_modules/tslib/tslib.js",
        ":rxjs_umd_modules",
    ],
    static_files = ASSETS + [
        ":inject_scripts_for_dev",
        "index.dev.html",
    ],
    visibility = ["//visibility:private"],
    deps = [
        ":ng-todo-app",
    ],
)

rollup_bundle(
    name = "bundle-es2015",
    config_file = "rollup.config.js",
    entry_points = {
        ":main.prod.ts": "index",
    },
    format = "esm",
    output_dir = True,
    deps = [
        ":ng-todo-app",
        "@npm//rollup-plugin-commonjs",
        "@npm//rollup-plugin-node-resolve",
    ],
)

rollup_bundle(
    name = "bundle-es5",
    config_file = "rollup.config.js",
    entry_points = {
        ":main.prod.ts": "index",
    },
    format = "system",
    output_dir = True,
    deps = [
        ":ng-todo-app",
        "@npm//rollup-plugin-commonjs",
        "@npm//rollup-plugin-node-resolve",
    ],
)

terser_minified(
    name = "bundle-es2015.min",
    src = ":bundle-es2015",
    args = [
        "--passes=2",
    ],
)

terser_minified(
    name = "bundle-es5.min",
    src = ":bundle-es5",
    args = [
        "--passes=2",
    ],
)

html_insert_assets(
    name = "inject_scripts_for_prod",
    outs = ["_prodapp/src/ng-todo-app/index.html"],
    args = [
        "--html=$(execpath :index.prod.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
    ],
    data = [":index.prod.html"],
)

pkg_web(
    name = "prodapp",
    srcs = ASSETS + [
        ":bundle-es5.min",
        ":bundle-es2015.min",
        ":inject_scripts_for_prod",
        "@npm//:node_modules/core-js-bundle/minified.js",
        "@npm//:node_modules/systemjs/dist/system.js",
    ],
    additional_root_paths = [
        "npm/node_modules/",
    ],
)

history_server(
    name = "prodserver",
    data = [":prodapp"],
    # '-a src/prodapp' will ask history-server to scan for all apps under the
    # given folder this will result in the following auto-configuration:
    #   /example => src/prodapp/example
    #   /        => src/prodapp
    templated_args = [
        "-a",
        "src/ng-todo-app/prodapp",
    ],
)
